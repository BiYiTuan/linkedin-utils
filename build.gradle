/*
 * Copyright 2010-2010 LinkedIn, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

import org.apache.tools.ant.filters.ReplaceTokens

// allow overriding of properties based on user preference
userConfig = getConfig("${System.getProperty('user.home')}/.org.linkedin.${project.name}.properties")

// topBuildDir
topBuildDir   = userConfig.top.build.dir   ?: "${rootDir}/out/build"
topInstallDir = userConfig.top.install.dir ?: "${rootDir}/out/dist"
topPublishDir = userConfig.top.publish.dir ?: "${rootDir}/out/repo"

scmUrl = "git@github.com:linkedin/${project.name}.git"

groovyVersion = '1.7.5'
slf4jVersion= '1.5.8' // to be compatible with grails 1.3.5

// external dependencies versions
external = [
    ant: 'org.apache.ant:ant:1.8.1',
    groovy: "org.codehaus.groovy:groovy:${groovyVersion}",
    json: 'org.json:json:20090211',
    junit: 'junit:junit:4.4',
    log4j: 'log4j:log4j:1.2.16',
    slf4j: "org.slf4j:slf4j-api:${slf4jVersion}",
    slf4jLog4j: "org.slf4j:slf4j-log4j12:${slf4jVersion}",
    slf4jJul: "org.slf4j:jul-to-slf4j:${slf4jVersion}"
]

allprojects {
  apply plugin: 'idea'
}

// we use git
ideaProject {
  withXml { root ->
    root.asNode().component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'

  repositories {
    mavenCentral()
  }

  group = 'org.linkedin'
  version = '1.0.0'

  sourceCompatibility = '1.6'
  targetCompatibility = '1.6'

  buildDir = "${topBuildDir}${project.path.replace(':','/')}".toString()

  afterEvaluate { createUploadArchives(it) }
}

/**
 * Create the uploadArchives task.
 */
void createUploadArchives(p)
{
  // the tasks and archives are only necessary when actually invoking the task!
  if(p.gradle.startParameter.taskNames.find { it == 'uploadArchives'})
  {
    p.task([type: Jar, dependsOn: "classes"], 'sourcesJar') {
        classifier = 'sources'
        from p.sourceSets.main.allSource
    }

    p.task([type: Jar, dependsOn: "javadoc"], 'javadocJar') {
        classifier = 'javadoc'
        from p.javadoc.destinationDir
    }

    p.artifacts {
        archives p.sourcesJar
        archives p.javadocJar
    }

    if(p.plugins.hasPlugin('groovy'))
    {
      p.task([type: Jar, dependsOn: "groovydoc"], 'groovydocJar') {
          classifier = 'groovydoc'
          from p.groovydoc.destinationDir
      }

      p.artifacts {
        archives p.groovydocJar
      }
    }
  }

  p.uploadArchives {
    repositories.mavenDeployer {
      repository(url: "file://localhost${topPublishDir}")
      pom.whenConfigured { pomToConfigure ->
        pomToConfigure.project {
          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0'
            }
          }
          scm {
            connection "scm:git:${scmUrl}"
            developerConnection "scm:git:${scmUrl}"
            url scmUrl
          }
        }
      }
    }
  }
}

def getConfig(def configFile)
{
  configFile = new File(configFile.toString())
  if(configFile.exists())
  {
    logger.info "Loading user config [${configFile.toURL()}]"
    def userProperties = new Properties()
    configFile.withReader { userProperties.load(it) }
    new ConfigSlurper().parse(userProperties)
  }
  else
  {
    logger.debug "No user config found [${configFile.toURL()}]"
    return new ConfigObject()
  }
}
